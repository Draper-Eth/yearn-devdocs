(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{128:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return o})),a.d(t,"toc",(function(){return b})),a.d(t,"default",(function(){return s}));var r=a(3),n=a(8),l=(a(0),a(270)),i={},o={unversionedId:"process-and-procedures/deployment",id:"version-0.4.2/process-and-procedures/deployment",isDocsHomePage:!1,title:"Deploying a Vault and Strategy V2",description:"Note: The Chief Multisig Officer repo is encouraged to create multiple scripts for governance and dev multisig execution of complex transactions.",source:"@site/versioned_docs/version-0.4.2/process-and-procedures/deployment.md",sourceDirName:"process-and-procedures",slug:"/process-and-procedures/deployment",permalink:"/yearn-devdocs/v2/process-and-procedures/deployment",editUrl:"https://github.com/yearn/yearn-devdocs/edit/master/website/versioned_docs/version-0.4.2/process-and-procedures/deployment.md",version:"0.4.2",frontMatter:{},sidebar:"version-0.4.2/mySidebar",previous:{title:"Getting Started with Vaults",permalink:"/yearn-devdocs/v2/getting-started"},next:{title:"Operations procedures",permalink:"/yearn-devdocs/v2/process-and-procedures/operations"}},b=[{value:"Requirements",id:"requirements",children:[]},{value:"Deploying a new Experimental Vault",id:"deploying-a-new-experimental-vault",children:[]},{value:"Deploying a new Strategy",id:"deploying-a-new-strategy",children:[]},{value:"Make the Vault and Strategy work together",id:"make-the-vault-and-strategy-work-together",children:[]},{value:"Test harvesting manually",id:"test-harvesting-manually",children:[]},{value:"Scaling up / Moving to Endorse",id:"scaling-up--moving-to-endorse",children:[{value:"Endorsing a vault from a previous release",id:"endorsing-a-vault-from-a-previous-release",children:[]}]},{value:"Setting up Keep3r",id:"setting-up-keep3r",children:[]},{value:"References",id:"references",children:[{value:"Limits per Stage",id:"limits-per-stage",children:[]},{value:"Sharer contract",id:"sharer-contract",children:[]},{value:"Addresses",id:"addresses",children:[]}]}],c={toc:b};function s(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(l.b)("wrapper",Object(r.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Note"),": The Chief Multisig Officer repo is encouraged to create multiple scripts for governance and dev multisig execution of complex transactions."),Object(l.b)("h2",{id:"requirements"},"Requirements"),Object(l.b)("p",null,"Make sure you have the brownie environment setup before trying to deploy a vault. Check out the ",Object(l.b)("a",{parentName:"p",href:"https://github.com/yearn/yearn-vaults/blob/master/README.md"},"Readme MD")," for instructions."),Object(l.b)("p",null,"The below instructions show some python commands that assume you are using the brownie console or a brownie script setup is in place."),Object(l.b)("h2",{id:"deploying-a-new-experimental-vault"},"Deploying a new Experimental Vault"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Clone this repo and run ",Object(l.b)("inlineCode",{parentName:"p"},"brownie run scripts/deploy.py --network <network-to-deploy-vault>"))),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Choose the brownie account for deploying your vault. This account needs to have balance to pay for the deploy transaction.")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Confirm the script is using the latest version of registry ",Object(l.b)("inlineCode",{parentName:"p"},"v2.registry.ychad.eth")," against the planned new release vault to be sure its an updated version. (Can validate on Etherscan for latest address)")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Select the version of vault to deploy or press enter to use latest release.")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Enter ",Object(l.b)("inlineCode",{parentName:"p"},"Y")," when prompt to deploy Proxy Vault")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Enter the checksummed address of the ERC20 token the vault will use. ")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Enter the vault Parameters (Below are some suggested values):"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Set your address or an address you control as governance."),Object(l.b)("li",{parentName:"ul"},"Set Treasury (",Object(l.b)("inlineCode",{parentName:"li"},"treasury.ychad.eth"),") as the rewards address."),Object(l.b)("li",{parentName:"ul"},"Set Core Dev multisig (",Object(l.b)("inlineCode",{parentName:"li"},"dev.ychad.eth"),") as guardian."),Object(l.b)("li",{parentName:"ul"},"Set Strategist multisig (",Object(l.b)("inlineCode",{parentName:"li"},"brain.ychad.eth"),") as management."),Object(l.b)("li",{parentName:"ul"},"Set description and symbol for vault or use suggested as default (can be changed on chain later)"))),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Confirm the Parameters are set correctly and press ",Object(l.b)("inlineCode",{parentName:"p"},"y"),"and ENTER to deploy vault. ")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Check new vault has ABI setup on Etherscan (Some vault versions from older releases may have verification issues with Vyper and proxy detection on Etherscan, consider using latest releases >0.3.5 to ensure verification works).")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Set up the vault with correct deposit limit:"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-python"},"vault.setDepositLimit(limit)\n"))),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Set management fee to 0:"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-python"},"vault.setManagementFee(0)\n"))),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"(Optional) Set governance to ychad.eth (",Object(l.b)("inlineCode",{parentName:"p"},"0xFEB4acf3df3cDEA7399794D0869ef76A6EfAff52"),") if vault is planned to be endorsed soon:"))),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Note you can still make changes to the vault after setting governance up until governance is accepted"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-python"},"vault.setGovernance(ychad.eth)\n")))),Object(l.b)("h2",{id:"deploying-a-new-strategy"},"Deploying a new Strategy"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"Discuss your strategy in Discord or Telegram to gain access to the yearn/yearn-strategies repository."),Object(l.b)("li",{parentName:"ol"},"Create a new issue in the strategies' ",Object(l.b)("a",{parentName:"li",href:"https://github.com/yearn/yearn-strategies/issues"},"repo")," using the template ",Object(l.b)("inlineCode",{parentName:"li"},"Strategy Review"),". ",Object(l.b)("strong",{parentName:"li"},"Complete all the fields"),"."),Object(l.b)("li",{parentName:"ol"},"If the strategy is targeting a new protocol/new chain, not currently approved by yearn (used in production), a due diligence and path to production plan documents may also be required for the strategy to be considered for endorsing. ",Object(l.b)("a",{parentName:"li",href:"https://hackmd.io/@ucVuhc2gShSGsOJwjaDvqg/HJ1ZplgTO"},"PATH TO PROD"),"\nExamples ",Object(l.b)("a",{parentName:"li",href:"https://hackmd.io/0w1RZh7DSc27A9EyzlHbJQ?view"},"SNX"),", ",Object(l.b)("a",{parentName:"li",href:"https://hackmd.io/@Ap_76vwNTg-vxJxbiaLMMQ/SkXEzic7O"},"VESPER")," "),Object(l.b)("li",{parentName:"ol"},"Coordinate with Core Dev strategist for getting a review on ",Object(l.b)("a",{parentName:"li",href:"https://github.com/orgs/yearn/projects/5"},"board"),"."),Object(l.b)("li",{parentName:"ol"},"Complete peer review by at least 2 strategists."),Object(l.b)("li",{parentName:"ol"},"Check if ",Object(l.b)("inlineCode",{parentName:"li"},"want")," token has a deployed vault already (>=v0.3.0) and coordinate to use that first if possible."),Object(l.b)("li",{parentName:"ol"},"Coordinate with core developer to set proper deposit limit and other settings for new vault. See the table below: ",Object(l.b)("a",{parentName:"li",href:"#limits-per-stage"},"Limits per Stage"),"."),Object(l.b)("li",{parentName:"ol"},"Deploy strategy and upload code to Etherscan for verification."),Object(l.b)("li",{parentName:"ol"},"Tag GitHub review issue with deployed version and add mainnet address(es) to the ",Object(l.b)("a",{parentName:"li",href:"https://github.com/orgs/yearn/projects/5"},"board"),".")),Object(l.b)("h2",{id:"make-the-vault-and-strategy-work-together"},"Make the Vault and Strategy work together"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Add strategy to vault (for vault code v0.3.3+):"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-python"},"strategy = ''                     # Your strategy address\ndebt_ratio = 9800                 # 98%\nminDebtPerHarvest = 0             # Lower limit on debt add\nmaxDebtPerHarvest = 2 ** 256 - 1  # Upper limit on debt add\nperformance_fee = 1000            # Strategist perf fee: 10%\n\nvault.addStrategy(\n  strategy, \n  debt_ratio, \n  minDebtPerHarvest,\n  maxDebtPerHarvest,\n  performance_fee\n)\n")),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"debt_ratio")," should be ",Object(l.b)("inlineCode",{parentName:"li"},"9800")," if first strategy on vault."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rate_limit")," is ",Object(l.b)("inlineCode",{parentName:"li"},"0")," unless there is reason for it to be different."))),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Set keeper:"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-python"},"strategy.setKeeper(keep3r_manager)\n")),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"keep3r_manager")," = ",Object(l.b)("inlineCode",{parentName:"li"},"0x736D7e3c5a6CB2CE3B764300140ABF476F6CFCCF")))),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Set rewards:"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-python"},"strategy.setRewards(address)\n")),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Read ",Object(l.b)("a",{parentName:"li",href:"#Sharer-contract-(optional)"},"below")," if you want to use the sharer contract."))),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},'Run tests against "live" vault and strategy in mainnet-fork:'),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Harvest.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Profitable harvest.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Revoke strategy and check that funds return to the vault.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Increase/decrease debt + harvest, and check that the strategy is working well.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Migration.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Check that tokens in the strategy cannot be sweeped by dust collection.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"Example"),": Hegic strat ",Object(l.b)("a",{parentName:"p",href:"https://github.com/Macarse/yhegic/tree/master/tests/development"},"repo"),"."))))),Object(l.b)("h2",{id:"test-harvesting-manually"},"Test harvesting manually"),Object(l.b)("p",null,"If you need a UI to test, you can coordinate with the strategists."),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Deposit some ",Object(l.b)("inlineCode",{parentName:"p"},"want")," tokens into the vault.")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Do first ",Object(l.b)("inlineCode",{parentName:"p"},"harvest")," and make sure it worked correctly."),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-python"},"strategy.harvest()\n"))),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Monitor ",Object(l.b)("inlineCode",{parentName:"p"},"harvest")," and ",Object(l.b)("inlineCode",{parentName:"p"},"tend")," triggers for first few days. Call ",Object(l.b)("inlineCode",{parentName:"p"},"harvest"),"/",Object(l.b)("inlineCode",{parentName:"p"},"tend")," manually."))),Object(l.b)("h2",{id:"scaling-up--moving-to-endorse"},"Scaling up / Moving to Endorse"),Object(l.b)("p",null,"In addition to the 2 strategists, a Core Developer has to review the strategy before going into production."),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Increase deposit limit according to the table ",Object(l.b)("a",{parentName:"p",href:"#Limits-per-Stage"},"below"))),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Set management fee to production level:"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-python"},"vault.setManagementFee(200)\n"))),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Set parameters for vault correctly before endorse:"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Set Governance to (",Object(l.b)("inlineCode",{parentName:"li"},"ychad.eth"),") "),Object(l.b)("li",{parentName:"ul"},"Set Treasury (",Object(l.b)("inlineCode",{parentName:"li"},"treasury.ychad.eth"),") as the rewards address."),Object(l.b)("li",{parentName:"ul"},"Set Core Dev multisig (",Object(l.b)("inlineCode",{parentName:"li"},"dev.ychad.eth"),") as guardian."),Object(l.b)("li",{parentName:"ul"},"Set Strategist multisig (",Object(l.b)("inlineCode",{parentName:"li"},"brain.ychad.eth"),") as management."),Object(l.b)("li",{parentName:"ul"},"Set description and symbol for vault or use suggested as default (can be changed on chain later)"))),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Yearn governance now must accept governance and endorse the vault:"))),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"strategy.acceptGovernance()\nregistry.endorseVault(vault)\n")),Object(l.b)("h3",{id:"endorsing-a-vault-from-a-previous-release"},"Endorsing a vault from a previous release"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Check for latest release number in the registry contract")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Check the apiVersion of the vault you want to endorse to identify target release")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Calculate the releaseDelta from your target release. (see registry endorseVault param details)\nE.g: latestRelease = 0.3.3 and numReleases = 5. New vault apiVersion is 0.3.2\n",Object(l.b)("inlineCode",{parentName:"p"},"releaseDelta = numReleases - 1 - releaseTarget"))),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Confirm using ",Object(l.b)("inlineCode",{parentName:"p"},"registry.releases(uint256)")," that your ",Object(l.b)("inlineCode",{parentName:"p"},"targetRelease")," has the same apiVersion as your vault."),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-python"},"releaseTarget = 3 # e.g vault api version 0.3.2\nreleaseDelta = registry.numReleases() - 1 - releaseTarget # (5-1-3) = 1\nstrategy.acceptGovernance() # from ychad.eth\nregistry.endorseVault(vault, releaseDelta) # from ychad.eth.\n")))),Object(l.b)("h2",{id:"setting-up-keep3r"},"Setting up Keep3r"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Adjust trigger variables until they are correct:"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-python"},"strategy.setProfitFactor()\nstrategy.setDebtThreshold()\nstrategy.setMaxReportDelay()\n"))),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Set strategy's Keep3r role to v2-keeper-contract"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-python"},"strategy.setKeeper(0x736D7e3c5a6CB2CE3B764300140ABF476F6CFCCF)\n"))),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"Create an add-strategy PR in Keep3r ",Object(l.b)("a",{parentName:"p",href:"https://github.com/yearn/yearn-keeper"},"repo")," (TBD)"))),Object(l.b)("h2",{id:"references"},"References"),Object(l.b)("h3",{id:"limits-per-stage"},"Limits per Stage"),Object(l.b)("p",null,"These are the standard deposit limits per stage. They can be adjusted on a case by case basis."),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Stage"),Object(l.b)("th",{parentName:"tr",align:null},"Limit"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"Experimental"),Object(l.b)("td",{parentName:"tr",align:null},"$500K")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"Production"),Object(l.b)("td",{parentName:"tr",align:null},"$10M")))),Object(l.b)("h3",{id:"sharer-contract"},"Sharer contract"),Object(l.b)("p",null,'"Sharer" is a contract for distributing/splitting strategist rewards. For boarding school graduates suggested split is 34% to strategist multisig and 66% to strategist \u2013 ',Object(l.b)("a",{parentName:"p",href:"https://github.com/Grandthrax/Sharer"},"Sharer Contract"),"."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Setup rewards for your strategy by calling ",Object(l.b)("inlineCode",{parentName:"li"},"sharer.addContributors"),"."),Object(l.b)("li",{parentName:"ul"},"Include devs if you forked someone else's strategy."),Object(l.b)("li",{parentName:"ul"},"Be sure to reward people who helped you."),Object(l.b)("li",{parentName:"ul"},"You can find the sharer here: ",Object(l.b)("a",{parentName:"li",href:"https://etherscan.io/address/0x2c641e14afecb16b4aa6601a40ee60c3cc792f7d"},"0x2c641e14afecb16b4aa6601a40ee60c3cc792f7d"))),Object(l.b)("h3",{id:"addresses"},"Addresses"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Identity"),Object(l.b)("th",{parentName:"tr",align:null},"ENS"),Object(l.b)("th",{parentName:"tr",align:null},"Address"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"V2 Registry"),Object(l.b)("td",{parentName:"tr",align:null},"v2.registry.ychad.eth"),Object(l.b)("td",{parentName:"tr",align:null},"0x50c1a2eA0a861A967D9d0FFE2AE4012c2E053804")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"Yearn multisig (daddy)"),Object(l.b)("td",{parentName:"tr",align:null},"ychad.eth"),Object(l.b)("td",{parentName:"tr",align:null},"0xFEB4acf3df3cDEA7399794D0869ef76A6EfAff52")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"Strategist multisig"),Object(l.b)("td",{parentName:"tr",align:null},"brain.ychad.eth"),Object(l.b)("td",{parentName:"tr",align:null},"0x16388463d60FFE0661Cf7F1f31a7D658aC790ff7")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"Core Dev multisig"),Object(l.b)("td",{parentName:"tr",align:null},"dev.ychad.eth"),Object(l.b)("td",{parentName:"tr",align:null},"0x846e211e8ba920B353FB717631C015cf04061Cc9")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"Treasury"),Object(l.b)("td",{parentName:"tr",align:null},"treasury.ychad.eth"),Object(l.b)("td",{parentName:"tr",align:null},"0xfeb4acf3df3cdea7399794d0869ef76a6efaff52")))))}s.isMDXComponent=!0},270:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return u}));var r=a(0),n=a.n(r);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function b(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=n.a.createContext({}),s=function(e){var t=n.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=s(e.components);return n.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},m=n.a.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,c=b(e,["components","mdxType","originalType","parentName"]),p=s(a),m=r,u=p["".concat(i,".").concat(m)]||p[m]||d[m]||l;return a?n.a.createElement(u,o(o({ref:t},c),{},{components:a})):n.a.createElement(u,o({ref:t},c))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=m;var o={};for(var b in t)hasOwnProperty.call(t,b)&&(o[b]=t[b]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var c=2;c<l;c++)i[c]=a[c];return n.a.createElement.apply(null,i)}return n.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);